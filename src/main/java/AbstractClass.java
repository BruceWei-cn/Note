/**
 * @author: Ming
 * @Date: 2021/4/30 16:05
 * @Description: 对于抽象类的一些介绍
 */
public class AbstractClass {

	/**
	 *  关于抽象类
	 *  0. 抽象类不能被实例化，否则编译错误（只有抽象类的非抽象子类才可以创建对象）
	 *  1. 并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
	 *  2. 抽象类不能实例话对象，但类的其他功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样
	 *  3. 由于抽象类无法实例话对象，所以抽象类必须被继承才可被使用。
	 *  	3.1 含有抽象方法的类一定为抽象类
	 *
	 *  4. super() 可以调用父类的无参构造，super(*)调用父类的有参的构造方式
	 *  5. super可以调用父类的方法或参数
	 *  6. 如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。
	 *  		Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。
	 *  		抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。
	 *  7. 构造方法，类方法（用static修饰的方法）不能被声明为抽象方法
	 *  8. 子类若非抽象类，则必须实现父类的抽象方法
	 */
}
